<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!--
		MVC：一种架构思想
		M：模型层（JavaBean，分为实体Bean和业务Bean）  V：视图层（页面）   C：控制层（Servlet）

		SpringMVC
		和Spring框架无缝对接
		基于原生Servlet，通过DispatcherServlet前端控制器对请求和响应进行统一处理
		可插拔式组件
	-->

	<!--
		组件：
		DispatcherServlet：前端控制器，整个流程控制的中心，用来调用其他组件处理用户的请求
		HandlerMapping：处理器映射器，根据请求的url、method等信息查找Handler控制器方法
		HandlerAdapter：处理器适配器，执行Handler控制器方法
		ViewResolver：视图解析器，进行视图解析得到相应的视图
		View：视图，将数据进行渲染
	-->

	<!--
		执行流程：DispatcherServlet-HandlerMapping(HandlerExecutionChain)-HandlerAdapter-perHandle()-Handler-
				ModelAndView-postHandle()-ViewResolver-(HandlerExceptionResolver)-afterCompletion()
		用户发送请求被DispatcherServlet前端控制器捕获，并对URL进行解析得到URI
		URI对应的映射不存在，判断是否配置了默认处理器
		URI对应的映射存在，调用HandlerMapping获得对应的Handler的所有相关对象（Handler对象、拦截器），以HandlerExecutionChain执行链返回
		DispatcherServlet根据获得的Handler选择一个合适的HandlerAdapter，获取HandlerAdapter成功将开始执行拦截器的perHandle()方法
		填充Handler形参，开始执行Handler控制器方法（填充形参时会进行HttpMessageConveter、类型转换、数据格式化、数据验证）
		Handler控制器方法执行完成后向DispatcherServlet返回一个ModelAndView对象，此时开始执行拦截器的postHandle()方法
		根据返回的ModelAndView选择一个合适的ViewResolver进行视图解析，根据Model和View进行视图渲染（判断异常，如果存在异常，执行HandlerExceptionResolver异常处理器）
		渲染视图完成之后执行拦截器的afterCompletion()方法
		将渲染的结果返回到客户端
	-->

	<context:component-scan base-package="com.zhq.controller"/>

	<!-- 配置Thymeleaf视图解析器 -->
	<bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
		<!--视图解析器的优先级-->
		<property name="order" value="1"/>
		<!--解析视图使用的编码-->
		<property name="characterEncoding" value="UTF-8"/>
		<!--模板-->
		<property name="templateEngine">
			<bean class="org.thymeleaf.spring5.SpringTemplateEngine">
				<property name="templateResolver">
					<bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
						<!-- 视图前缀 -->
						<property name="prefix" value="/WEB-INF/templates/"/>
						<!-- 视图后缀 -->
						<property name="suffix" value=".html"/>
						<!--模板的模型-->
						<property name="templateMode" value="HTML5"/>
						<!--页面编码-->
						<property name="characterEncoding" value="UTF-8" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!--mvc的注解驱动，将Object对象转换为json格式-->
	<mvc:annotation-driven/>

	<!--视图控制器，实现页面的访问（没有任何操作只是访问数据的作用）-->
	<mvc:view-controller path="/index" view-name="index"/>

	<!--配置默认控制器将dispatchServlet解决不了的路径交给默认的Tomcat控制器处理，解决静态资源访问问题-->
	<mvc:default-servlet-handler/>
	
	<!--配置拦截器-->
	<mvc:interceptors>
		<mvc:interceptor>
			<!--配置拦截的路径-->
			<mvc:mapping path="/**"/>
			<!--配置放行的路径-->
			<mvc:exclude-mapping path="/static/**"/>
			<!--配置实现了HandlerInterceptor接口的拦截器实现类-->
			<bean class="com.zhq.handler.MyInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>